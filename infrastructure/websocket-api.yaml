AWSTemplateFormatVersion: '2010-09-09'
Description: 'WebSocket API Gateway for Auto Lab Solutions'

Parameters:
  Environment:
    Type: String
    Default: production
    Description: Environment name
  
  WsConnectArn:
    Type: String
    Description: WebSocket Connect Lambda ARN
  
  WsDisconnectArn:
    Type: String
    Description: WebSocket Disconnect Lambda ARN
  
  WsInitArn:
    Type: String
    Description: WebSocket Init Lambda ARN
  
  WsPingArn:
    Type: String
    Description: WebSocket Ping Lambda ARN
  
  WsStaffInitArn:
    Type: String
    Description: WebSocket Staff Init Lambda ARN

  # Custom Domain Parameters
  EnableApiCustomDomains:
    Type: String
    AllowedValues: ['true', 'false']
    Default: 'false'
    Description: Whether to enable custom domains for API Gateway endpoints

  WebSocketDomainName:
    Type: String
    Description: The domain name for the WebSocket API (e.g., ws.autolabsolutions.com)
    Default: ''

  ApiHostedZoneId:
    Type: String
    Description: The ID of the Route53 hosted zone for API domains
    Default: ''

  ApiAcmCertificateArn:
    Type: String
    Description: ARN of the ACM certificate for API domains (must be in the same region)
    Default: ''

Conditions:
  ShouldEnableCustomDomain: !Equals [!Ref EnableApiCustomDomains, 'true']

Resources:
  # WebSocket API
  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: auto-lab-websocket-api
      Description: Auto Lab Solutions WebSocket API
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action

  # Integrations
  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WsConnectArn}/invocations'

  DisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WsDisconnectArn}/invocations'

  InitIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WsInitArn}/invocations'
      IntegrationMethod: POST
      PassthroughBehavior: WHEN_NO_MATCH
      PayloadFormatVersion: '1.0'
      TimeoutInMillis: 29000
      RequestTemplates:
        Template1: |
          {
            "connectionId": "$context.connectionId",
            "domain": "$context.domainName",
            "stage": "$context.stage",
            "body": $input.body
          }
      TemplateSelectionExpression: Template1

  PingIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WsPingArn}/invocations'
      IntegrationMethod: POST
      PassthroughBehavior: WHEN_NO_MATCH
      PayloadFormatVersion: '1.0'
      TimeoutInMillis: 29000
      ContentHandlingStrategy: CONVERT_TO_TEXT
      RequestTemplates:
        Template1: |
          {
            "connectionId": "$context.connectionId",
            "domain": "$context.domainName",
            "stage": "$context.stage",
            "body": $input.body
          }
      TemplateSelectionExpression: Template1

  StaffInitIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WsStaffInitArn}/invocations'
      IntegrationMethod: POST
      PassthroughBehavior: WHEN_NO_MATCH
      PayloadFormatVersion: '1.0'
      TimeoutInMillis: 29000
      RequestTemplates:
        Template1: |
          {
            "connectionId": "$context.connectionId",
            "domain": "$context.domainName",
            "stage": "$context.stage",
            "body": $input.body
          }
      TemplateSelectionExpression: Template1


  # Routes
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      Target: !Sub 'integrations/${ConnectIntegration}'

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      Target: !Sub 'integrations/${DisconnectIntegration}'

  InitRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: init
      AuthorizationType: NONE
      Target: !Sub 'integrations/${InitIntegration}'

  PingRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: ping
      AuthorizationType: NONE
      Target: !Sub 'integrations/${PingIntegration}'

  StaffInitRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: staff-init
      AuthorizationType: NONE
      Target: !Sub 'integrations/${StaffInitIntegration}'


  # Lambda Permissions
  ConnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref WsConnectArn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/*'

  DisconnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref WsDisconnectArn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/*'

  InitPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref WsInitArn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/*'

  PingPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref WsPingArn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/*'

  StaffInitPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref WsStaffInitArn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/*'

  # Stage
  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref WebSocketApi
      StageName: !Ref Environment
      AutoDeploy: true

  # Custom Domain Configuration for WebSocket API
  WebSocketCustomDomain:
    Type: AWS::ApiGatewayV2::DomainName
    Condition: ShouldEnableCustomDomain
    Properties:
      DomainName: !Ref WebSocketDomainName
      DomainNameConfigurations:
        - CertificateArn: !Ref ApiAcmCertificateArn
          EndpointType: REGIONAL
          SecurityPolicy: TLS_1_2

  # API Mapping for WebSocket API
  WebSocketApiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Condition: ShouldEnableCustomDomain
    Properties:
      ApiId: !Ref WebSocketApi
      DomainName: !Ref WebSocketCustomDomain
      Stage: !Ref Environment

  # Route53 Record for WebSocket API
  WebSocketRoute53Record:
    Type: AWS::Route53::RecordSet
    Condition: ShouldEnableCustomDomain
    Properties:
      HostedZoneId: !Ref ApiHostedZoneId
      Name: !Ref WebSocketDomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt WebSocketCustomDomain.RegionalDomainName
        HostedZoneId: !GetAtt WebSocketCustomDomain.RegionalHostedZoneId
        EvaluateTargetHealth: false

Outputs:
  WebSocketApiId:
    Description: WebSocket API ID
    Value: !Ref WebSocketApi
    Export:
      Name: !Sub '${AWS::StackName}-WebSocketApiId'

  WebSocketApiEndpoint:
    Description: WebSocket API Endpoint
    Value: !If
      - ShouldEnableCustomDomain
      - !Sub 'wss://${WebSocketDomainName}'
      - !Sub 'wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-WebSocketApiEndpoint'

  WebSocketApiHTTPEndpoint:
    Description: WebSocket API HTTP Endpoint
    Value: !Sub 'https://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-WebSocketApiHTTPEndpoint'

  WebSocketCustomDomain:
    Description: WebSocket API Custom Domain (if enabled)
    Value: !If [ShouldEnableCustomDomain, !Ref WebSocketDomainName, 'Not configured']
    Export:
      Name: !Sub '${AWS::StackName}-WebSocketCustomDomain'
