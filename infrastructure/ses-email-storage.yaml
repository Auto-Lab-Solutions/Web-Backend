AWSTemplateFormatVersion: '2010-09-09'
Description: 'SES Email Storage - S3 Only (No Notifications, No Processing)'

Parameters:
  EnvironmentName:
    Type: String
    Description: Environment name
    Default: production

  EmailStorageBucketName:
    Type: String
    Description: S3 bucket name for storing received emails
    Default: "auto-lab-email-storage"

  SesRegion:
    Type: String
    Description: AWS SES region
    Default: "ap-southeast-2"

  MailReceivingAddress:
    Type: String
    Description: Email address used for receiving emails
    Default: "mail@autolabsolutions.com"

Resources:
  # S3 Bucket for storing received emails - SIMPLE STORAGE ONLY
  EmailStorageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${EmailStorageBucketName}-${AWS::AccountId}-${EnvironmentName}'
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: false
        IgnorePublicAcls: true
        RestrictPublicBuckets: false
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldEmails
            Status: Enabled
            ExpirationInDays: 365  # Keep emails for 1 year
            NoncurrentVersionExpirationInDays: 30
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Purpose
          Value: EmailStorage
      
  # DynamoDB Table for Email Metadata
  EmailMetadataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'EmailMetadata-${EnvironmentName}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: messageId
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: N
      KeySchema:
        - AttributeName: messageId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: TimestampIndex
          KeySchema:
            - AttributeName: timestamp
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Purpose
          Value: EmailMetadata

  # S3 Bucket Policy to allow SES to write emails
  EmailStorageBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref EmailStorageBucket
      PolicyDocument:
        Statement:
          - Sid: AllowSESToWriteEmails
            Effect: Allow
            Principal:
              Service: ses.amazonaws.com
            Action:
              - s3:PutObject
            Resource: !Sub 
              - '${BucketArn}/*'
              - BucketArn: !GetAtt EmailStorageBucket.Arn
            Condition:
              StringEquals:
                'aws:Referer': !Ref 'AWS::AccountId'


  # SES Receipt Rule Set
  SESReceiptRuleSet:
    Type: AWS::SES::ReceiptRuleSet
    Properties:
      RuleSetName: !Sub 'auto-lab-email-rules-${EnvironmentName}'

  # SES Receipt Rule for incoming emails
  SESReceiptRule:
    Type: AWS::SES::ReceiptRule
    DependsOn: 
      - EmailStorageBucketPolicy
    Properties:
      RuleSetName: !Ref SESReceiptRuleSet
      Rule:
        Name: !Sub 'auto-lab-email-rule-${EnvironmentName}'
        Enabled: true
        Recipients:
          - !Ref MailReceivingAddress
        Actions:
          - S3Action:
              BucketName: !Ref EmailStorageBucket
              ObjectKeyPrefix: !Sub 'emails/${EnvironmentName}/'
        ScanEnabled: true


  # Lambda function to activate the SES receipt rule set (since CloudFormation doesn't support this directly)
  SESRuleSetActivatorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'ses-ruleset-activator-${EnvironmentName}'
      Runtime: python3.13
      Handler: index.lambda_handler
      Timeout: 60
      Role: !GetAtt SESRuleSetActivatorRole.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import json
          
          def lambda_handler(event, context):
              try:
                  ses_client = boto3.client('ses')
                  
                  if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                      rule_set_name = event['ResourceProperties']['RuleSetName']
                      region = event['ResourceProperties']['Region']
                      
                      # Set the rule set as active
                      ses_client.set_active_receipt_rule_set(RuleSetName=rule_set_name)
                      
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, 
                                     {'Message': f'Successfully activated rule set: {rule_set_name}'})
                  
                  elif event['RequestType'] == 'Delete':
                      # On delete, we need to deactivate the rule set to allow deletion
                      try:
                          rule_set_name = event['ResourceProperties']['RuleSetName']
                          
                          # Check if this rule set is currently active
                          active_rule_set = ses_client.describe_active_receipt_rule_set()
                          current_active_name = active_rule_set.get('RuleSet', {}).get('Name')
                          
                          if current_active_name == rule_set_name:
                              # This rule set is active, so we need to deactivate it
                              print(f'Deactivating active rule set: {rule_set_name}')
                              ses_client.set_active_receipt_rule_set()  # Call without RuleSetName deactivates all
                              
                              cfnresponse.send(event, context, cfnresponse.SUCCESS, 
                                             {'Message': f'Successfully deactivated rule set: {rule_set_name}'})
                          else:
                              # This rule set is not active, safe to proceed
                              cfnresponse.send(event, context, cfnresponse.SUCCESS, 
                                             {'Message': f'Rule set {rule_set_name} was not active, no deactivation needed'})
                                             
                      except Exception as delete_error:
                          print(f'Error during delete: {str(delete_error)}')
                          # Even if deactivation fails, we should succeed to allow stack deletion
                          cfnresponse.send(event, context, cfnresponse.SUCCESS, 
                                         {'Message': f'Delete completed with warning: {str(delete_error)}'})
                  
              except Exception as e:
                  print(f'Error: {str(e)}')
                  cfnresponse.send(event, context, cfnresponse.FAILED, 
                                 {'Message': f'Failed to manage rule set: {str(e)}'})

  # IAM Role for the SES rule set activator function
  SESRuleSetActivatorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SESRuleSetAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ses:SetActiveReceiptRuleSet
                  - ses:DescribeActiveReceiptRuleSet
                  - ses:ListReceiptRuleSets
                  - ses:DescribeReceiptRuleSet
                Resource: '*'

  # Custom resource to activate the SES receipt rule set
  SESRuleSetActivation:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: SESReceiptRule
    Properties:
      ServiceToken: !GetAtt SESRuleSetActivatorFunction.Arn
      RuleSetName: !Ref SESReceiptRuleSet
      Region: !Ref SesRegion
      MailFromAddress: !Ref MailReceivingAddress

Outputs:
  EmailStorageBucket:
    Description: S3 bucket for storing received emails
    Value: !Ref EmailStorageBucket
    Export:
      Name: !Sub '${AWS::StackName}-EmailStorageBucket'

  EmailMetadataTable:
    Description: DynamoDB table for email metadata
    Value: !Ref EmailMetadataTable
    Export:
      Name: !Sub '${AWS::StackName}-EmailMetadataTable'

  SESReceiptRuleSet:
    Description: SES receipt rule set name
    Value: !Ref SESReceiptRuleSet
    Export:
      Name: !Sub '${AWS::StackName}-SESReceiptRuleSet'
