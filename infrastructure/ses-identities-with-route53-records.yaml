AWSTemplateFormatVersion: '2010-09-09'
Description: 'Auto Lab Solutions - SES Domain Verification with Automatic DNS Setup'

Parameters:
  EnvironmentName:
    Type: String
    Description: Environment name
    Default: production

  SesRegion:
    Type: String
    Description: AWS SES region
    Default: "ap-southeast-2"

  HostedZoneId:
    Type: String
    Description: Route53 hosted zone ID (leave empty to skip DNS automation)
    Default: ""

  DomainName:
    Type: String
    Description: Domain name for email receiving
    Default: "autolabsolutions.com"

  MailFromDomain:
    Type: String
    Description: Custom MAIL FROM domain (subdomain of the verified domain)
    Default: ""

Conditions:
  HasHostedZone: !Not [!Equals [!Ref HostedZoneId, ""]]
  HasMailFromDomain: !Not [!Equals [!Ref MailFromDomain, ""]]

Resources:
  # Lambda execution role for SES verification
  SESVerificationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SESAndRoute53Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ses:VerifyDomainIdentity
                  - ses:GetIdentityVerificationAttributes
                  - ses:DeleteIdentity
                  - ses:VerifyDomainDkim
                  - ses:SetIdentityDkimEnabled
                  - ses:GetIdentityDkimAttributes
                  - ses:SetIdentityMailFromDomain
                  - ses:GetIdentityMailFromDomainAttributes
                Resource: '*'
              - Effect: Allow
                Action:
                  - route53:ChangeResourceRecordSets
                  - route53:GetChange
                  - route53:ListResourceRecordSets
                Resource: '*'

    # Lambda function for automated SES verification with DKIM and MAIL FROM
  SESVerificationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${EnvironmentName}-ses-verify'
      Runtime: python3.11
      Handler: index.handler
      Role: !GetAtt SESVerificationRole.Arn
      Timeout: 300
      Code:
        ZipFile: |
          import boto3
          import json
          import cfnresponse
          import time
          
          def handler(event, context):
              try:
                  print(f"Event: {json.dumps(event)}")
                  
                  props = event['ResourceProperties']
                  domain = props['DomainName']
                  ses_region = props['SesRegion']
                  hosted_zone_id = props.get('HostedZoneId', '')
                  mail_from_domain = props.get('MailFromDomain', f'mail.{domain}')
                  request_type = event['RequestType']
                  
                  ses_client = boto3.client('ses', region_name=ses_region)
                  route53_client = boto3.client('route53')
                  
                  response_data = {'DomainName': domain, 'MailFromDomain': mail_from_domain}
                  
                  if request_type in ['Create', 'Update']:
                      # Verify domain and get token
                      print(f"Verifying domain: {domain}")
                      verify_response = ses_client.verify_domain_identity(Domain=domain)
                      token = verify_response['VerificationToken']
                      
                      response_data['VerificationToken'] = token
                      print(f"Verification token: {token}")
                      
                      # Enable DKIM for the domain
                      print(f"Setting up DKIM for domain: {domain}")
                      try:
                          # First, verify domain for DKIM to get tokens
                          dkim_verify_response = ses_client.verify_domain_dkim(Domain=domain)
                          dkim_tokens = dkim_verify_response.get('DkimTokens', [])
                          print(f"DKIM tokens received: {dkim_tokens}")
                          
                          # Then enable DKIM
                          dkim_response = ses_client.set_identity_dkim_enabled(
                              Identity=domain,
                              DkimEnabled=True
                          )
                          print("DKIM enabled successfully")
                          
                          response_data['DkimTokens'] = dkim_tokens
                          print(f"DKIM setup completed with {len(dkim_tokens)} tokens")
                          
                      except Exception as e:
                          print(f"DKIM setup error: {e}")
                          # Still try to get existing DKIM attributes if available
                          try:
                              dkim_attrs_response = ses_client.get_identity_dkim_attributes(
                                  Identities=[domain]
                              )
                              if domain in dkim_attrs_response['DkimAttributes']:
                                  existing_tokens = dkim_attrs_response['DkimAttributes'][domain].get('DkimTokens', [])
                                  response_data['DkimTokens'] = existing_tokens
                                  print(f"Retrieved existing DKIM tokens: {existing_tokens}")
                              else:
                                  response_data['DkimTokens'] = []
                          except Exception as inner_e:
                              print(f"Failed to retrieve existing DKIM tokens: {inner_e}")
                              response_data['DkimTokens'] = []
                      
                      # Set up custom MAIL FROM domain
                      print(f"Setting up MAIL FROM domain: {mail_from_domain}")
                      try:
                          ses_client.set_identity_mail_from_domain(
                              Identity=domain,
                              MailFromDomain=mail_from_domain,
                              BehaviorOnMXFailure='UseDefaultValue'  # Fallback to SES default if MX fails
                          )
                          print(f"MAIL FROM domain set to: {mail_from_domain}")
                      except Exception as e:
                          print(f"MAIL FROM setup error: {e}")
                      
                      # Create DNS records if hosted zone provided
                      if hosted_zone_id:
                          print(f"Creating DNS records in zone: {hosted_zone_id}")
                          
                          changes = [
                              # SES domain verification record
                              {
                                  'Action': 'UPSERT',
                                  'ResourceRecordSet': {
                                      'Name': f'_amazonses.{domain}',
                                      'Type': 'TXT',
                                      'TTL': 300,
                                      'ResourceRecords': [{'Value': f'"{token}"'}]
                                  }
                              },
                              # MX record for receiving emails
                              {
                                  'Action': 'UPSERT',
                                  'ResourceRecordSet': {
                                      'Name': domain,
                                      'Type': 'MX',
                                      'TTL': 300,
                                      'ResourceRecords': [{'Value': f'10 inbound-smtp.{ses_region}.amazonaws.com'}]
                                  }
                              },
                              # SPF record for email authentication
                              {
                                  'Action': 'UPSERT',
                                  'ResourceRecordSet': {
                                      'Name': domain,
                                      'Type': 'TXT',
                                      'TTL': 300,
                                      'ResourceRecords': [{'Value': f'"v=spf1 include:amazonses.com ~all"'}]
                                  }
                              },
                              # DMARC record for email policy
                              {
                                  'Action': 'UPSERT',
                                  'ResourceRecordSet': {
                                      'Name': f'_dmarc.{domain}',
                                      'Type': 'TXT',
                                      'TTL': 300,
                                      'ResourceRecords': [{'Value': '"v=DMARC1; p=quarantine; rua=mailto:dmarc@' + domain + '"'}]
                                  }
                              },
                              # MAIL FROM domain MX record
                              {
                                  'Action': 'UPSERT',
                                  'ResourceRecordSet': {
                                      'Name': mail_from_domain,
                                      'Type': 'MX',
                                      'TTL': 300,
                                      'ResourceRecords': [{'Value': f'10 feedback-smtp.{ses_region}.amazonses.com'}]
                                  }
                              },
                              # MAIL FROM domain SPF record
                              {
                                  'Action': 'UPSERT',
                                  'ResourceRecordSet': {
                                      'Name': mail_from_domain,
                                      'Type': 'TXT',
                                      'TTL': 300,
                                      'ResourceRecords': [{'Value': '"v=spf1 include:amazonses.com ~all"'}]
                                  }
                              }
                          ]
                          
                          # Add DKIM CNAME records if tokens are available
                          dkim_tokens = response_data.get('DkimTokens', [])
                          for token in dkim_tokens:
                              changes.append({
                                  'Action': 'UPSERT',
                                  'ResourceRecordSet': {
                                      'Name': f'{token}._domainkey.{domain}',
                                      'Type': 'CNAME',
                                      'TTL': 300,
                                      'ResourceRecords': [{'Value': f'{token}.dkim.amazonses.com'}]
                                  }
                              })
                          
                          route53_client.change_resource_record_sets(
                              HostedZoneId=hosted_zone_id,
                              ChangeBatch={
                                  'Comment': f'SES configuration for {domain} with DKIM and MAIL FROM',
                                  'Changes': changes
                              }
                          )
                          
                          response_data['DNSRecordsCreated'] = 'true'
                          response_data['DkimRecordsCreated'] = str(len(dkim_tokens))
                          print(f"DNS records created successfully. DKIM records: {len(dkim_tokens)}")
                      else:
                          response_data['DNSRecordsCreated'] = 'false'
                          print("No hosted zone provided - manual DNS setup required")
                  
                  elif request_type == 'Delete':
                      # Clean up SES domain identity
                      try:
                          ses_client.delete_identity(Identity=domain)
                          print(f"Deleted SES identity: {domain}")
                      except Exception as e:
                          print(f"SES cleanup error (non-fatal): {e}")
                      
                      # Clean up DNS records
                      if hosted_zone_id:
                          try:
                              records = route53_client.list_resource_record_sets(
                                  HostedZoneId=hosted_zone_id
                              )
                              
                              changes = []
                              for record in records['ResourceRecordSets']:
                                  name = record['Name'].rstrip('.')
                                  # Clean up SES-related records
                                  if (name == f'_amazonses.{domain}' or 
                                      name == f'_dmarc.{domain}' or
                                      name == mail_from_domain or
                                      '._domainkey.' in name):
                                      changes.append({
                                          'Action': 'DELETE',
                                          'ResourceRecordSet': record
                                      })
                              
                              if changes:
                                  route53_client.change_resource_record_sets(
                                      HostedZoneId=hosted_zone_id,
                                      ChangeBatch={
                                          'Comment': f'Cleanup SES configuration for {domain}',
                                          'Changes': changes
                                      }
                                  )
                                  print("DNS cleanup completed")
                          except Exception as e:
                              print(f"DNS cleanup error (non-fatal): {e}")
                  
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
                  
              except Exception as e:
                  print(f"Error: {str(e)}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': str(e)})

  # Custom resource to trigger SES verification
  SESVerification:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt SESVerificationFunction.Arn
      DomainName: !Ref DomainName
      SesRegion: !Ref SesRegion
      HostedZoneId: !Ref HostedZoneId
      MailFromDomain: !If 
        - HasMailFromDomain
        - !Ref MailFromDomain
        - !Sub 'mail.${DomainName}'

  # SES Configuration Set
  SESConfigurationSet:
    Type: AWS::SES::ConfigurationSet
    Properties:
      Name: !Sub '${AWS::StackName}-config-set'

Outputs:
  SESDomainIdentity:
    Description: SES Domain Identity
    Value: !Ref DomainName
    Export:
      Name: !Sub '${AWS::StackName}-SESDomainIdentity'

  SESConfigurationSet:
    Description: SES Configuration Set
    Value: !Ref SESConfigurationSet
    Export:
      Name: !Sub '${AWS::StackName}-SESConfigurationSet'

  DomainName:
    Description: Domain name configured for SES
    Value: !Ref DomainName
    Export:
      Name: !Sub '${AWS::StackName}-DomainName'

  MailFromDomain:
    Description: Custom MAIL FROM domain
    Value: !GetAtt SESVerification.MailFromDomain
    Export:
      Name: !Sub '${AWS::StackName}-MailFromDomain'

  VerificationToken:
    Description: SES domain verification token
    Value: !GetAtt SESVerification.VerificationToken

  DkimTokens:
    Description: DKIM tokens for DNS configuration
    Value: !Join [",", !GetAtt SESVerification.DkimTokens]

  DNSRecordsCreated:
    Description: Whether DNS records were created automatically
    Value: !GetAtt SESVerification.DNSRecordsCreated

  DkimRecordsCreated:
    Description: Number of DKIM records created
    Value: !GetAtt SESVerification.DkimRecordsCreated

  VerificationInstructions:
    Description: Instructions for manual setup if needed
    Value: !Sub |
      Domain: ${DomainName}
      MAIL FROM Domain: ${SESVerification.MailFromDomain}
      DNS Records Created: ${SESVerification.DNSRecordsCreated}
      DKIM Records Created: ${SESVerification.DkimRecordsCreated}
      
      If DNS records were not created automatically, add these records to your DNS:
      
      1. Domain Verification:
         TXT record: _amazonses.${DomainName} = ${SESVerification.VerificationToken}
      
      2. Email Receiving (MX):
         MX record: ${DomainName} = 10 inbound-smtp.${SesRegion}.amazonaws.com
      
      3. SPF Record:
         TXT record: ${DomainName} = "v=spf1 include:amazonses.com ~all"
      
      4. DMARC Record:
         TXT record: _dmarc.${DomainName} = "v=DMARC1; p=quarantine; rua=mailto:dmarc@${DomainName}"
      
      5. MAIL FROM Domain (for better deliverability):
         MX record: ${SESVerification.MailFromDomain} = 10 feedback-smtp.${SesRegion}.amazonses.com
         TXT record: ${SESVerification.MailFromDomain} = "v=spf1 include:amazonses.com ~all"
      
      6. DKIM Records (create CNAME records for each token):
         For each DKIM token, create:
         CNAME record: [token]._domainkey.${DomainName} = [token].dkim.amazonses.com
         
      Check the DkimTokens output for the specific token values.
      
      Wait for DNS propagation (up to 72 hours) and check SES console for verification status.
