AWSTemplateFormatVersion: '2010-09-09'
Description: 'REST API Gateway for Auto Lab Solutions'

Parameters:
  Environment:
    Type: String
    Default: production
    Description: Environment name
  
  StaffAuthorizerArn:
    Type: String
    Description: Staff Authorizer Lambda ARN
  
  StaffAuthorizerOptionalArn:
    Type: String
    Description: Staff Authorizer Optional Lambda ARN
  
  GetPricesArn:
    Type: String
    Description: Get Prices Lambda ARN
  
  GetUsersArn:
    Type: String
    Description: Get Users Lambda ARN
  
  GetAppointmentsArn:
    Type: String
    Description: Get Appointments Lambda ARN
  
  CreateAppointmentArn:
    Type: String
    Description: Create Appointment Lambda ARN
  
  UpdateAppointmentArn:
    Type: String
    Description: Update Appointment Lambda ARN
  
  GetUnavailableSlotsArn:
    Type: String
    Description: Get Unavailable Slots Lambda ARN
  
  UpdateUnavailableSlotsArn:
    Type: String
    Description: Update Unavailable Slots Lambda ARN
  
  GetOrdersArn:
    Type: String
    Description: Get Orders Lambda ARN
  
  CreateOrderArn:
    Type: String
    Description: Create Order Lambda ARN
  
  UpdateOrderArn:
    Type: String
    Description: Update Order Lambda ARN

  CreatePaymentIntentArn:
    Type: String
    Description: Create Payment Intent Lambda ARN

  ConfirmCashPaymentArn:
    Type: String
    Description: Confirm Cash Payment Lambda ARN

  ConfirmStripePaymentArn:
    Type: String
    Description: Confirm Stripe Payment Lambda ARN
  
  WebhookStripePaymentArn:
    Type: String
    Description: Webhook Stripe Payment Lambda ARN
  
  GenerateInvoiceArn:
    Type: String
    Description: Generate Invoice Lambda ARN
  
  GetInquiriesArn:
    Type: String
    Description: Get Inquiries Lambda ARN
  
  CreateInquiryArn:
    Type: String
    Description: Create Inquiry Lambda ARN
  
  GetReportUploadUrlArn:
    Type: String
    Description: Get Report Upload URL Lambda ARN
  
  GetAnalyticsArn:
    Type: String
    Description: Get Analytics Lambda ARN
  
  GetStaffRolesArn:
    Type: String
    Description: Get Staff Roles Lambda ARN
  
  NotifyArn:
    Type: String
    Description: Notify Lambda ARN
  
  TakeUserArn:
    Type: String
    Description: Take User Lambda ARN
  
  GetConnectionsArn:
    Type: String
    Description: Get Connections Lambda ARN
  
  GetMessagesArn:
    Type: String
    Description: Get Messages Lambda ARN
  
  GetLastMessagesArn:
    Type: String
    Description: Get Last Messages Lambda ARN
  
  SendMessageArn:
    Type: String
    Description: Send Message Lambda ARN

  GetInvoicesArn:
    Type: String
    Description: Get Invoices Lambda ARN

Resources:
  # REST API
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: auto-lab-rest-api
      Description: Auto Lab Solutions REST API
      EndpointConfiguration:
        Types:
          - REGIONAL
      Policy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: execute-api:Invoke
            Resource: '*'

  # Authorizers
  StaffAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: staff-authorizer
      Type: REQUEST
      RestApiId: !Ref RestApi
      AuthorizerUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StaffAuthorizerArn}/invocations'
      AuthorizerCredentials: !GetAtt ApiGatewayExecutionRole.Arn
      AuthorizerResultTtlInSeconds: 0  # disables caching

  StaffAuthorizerOptional:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: staff-authorizer-optional
      Type: REQUEST
      RestApiId: !Ref RestApi
      AuthorizerUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StaffAuthorizerOptionalArn}/invocations'
      AuthorizerCredentials: !GetAtt ApiGatewayExecutionRole.Arn
      AuthorizerResultTtlInSeconds: 0  # disables caching

  # API Gateway Execution Role
  ApiGatewayExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaInvokePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: '*'

  # Resources and Methods
  PricesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: prices

  PricesMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref PricesResource
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref StaffAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetPricesArn}/invocations'

  UsersResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: users

  UsersMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref UsersResource
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref StaffAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUsersArn}/invocations'

  UsersOnlineResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref UsersResource
      PathPart: online

  UsersOnlineGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref UsersOnlineResource
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref StaffAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetConnectionsArn}/invocations'

  AppointmentsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: appointments

  AppointmentsGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref AppointmentsResource
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref StaffAuthorizerOptional
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetAppointmentsArn}/invocations'

  AppointmentsPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref AppointmentsResource
      HttpMethod: POST
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref StaffAuthorizerOptional
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateAppointmentArn}/invocations'
  # /appointments (OPTIONS)
  AppointmentsOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref AppointmentsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true

  # /appointments/{appointmentId}
  AppointmentsIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref AppointmentsResource
      PathPart: '{appointmentId}'

  AppointmentsIdGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref AppointmentsIdResource
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref StaffAuthorizerOptional
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetAppointmentsArn}/invocations'

  AppointmentsIdPatchMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref AppointmentsIdResource
      HttpMethod: PATCH
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref StaffAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateAppointmentArn}/invocations'

  AppointmentsIdOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref AppointmentsIdResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true

  UnavailableSlotsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: unavailable-slots

  UnavailableSlotsGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref UnavailableSlotsResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUnavailableSlotsArn}/invocations'

  UnavailableSlotsPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref UnavailableSlotsResource
      HttpMethod: POST
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref StaffAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateUnavailableSlotsArn}/invocations'

  OrdersResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: orders

  OrdersGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref OrdersResource
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref StaffAuthorizerOptional
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetOrdersArn}/invocations'

  OrdersPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref OrdersResource
      HttpMethod: POST
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref StaffAuthorizerOptional
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateOrderArn}/invocations'

  # /orders (OPTIONS)
  OrdersOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref OrdersResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
  
  # /orders/{orderId}
  OrdersIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref OrdersResource
      PathPart: '{orderId}'

  OrdersIdGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref OrdersIdResource
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref StaffAuthorizerOptional
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetOrdersArn}/invocations'

  OrdersIdPatchMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref OrdersIdResource
      HttpMethod: PATCH
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref StaffAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateOrderArn}/invocations'

  OrdersIdOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref OrdersIdResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true

  InquiriesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: inquiries

  InquiriesGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref InquiriesResource
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref StaffAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetInquiriesArn}/invocations'

  InquiriesPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref InquiriesResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateInquiryArn}/invocations'

  InquiriesOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref InquiriesResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true

  ReportUploadUrlsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: report-upload-urls

  ReportUploadUrlsPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref ReportUploadUrlsResource
      HttpMethod: POST
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref StaffAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetReportUploadUrlArn}/invocations'

  ReportUploadUrlsOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref ReportUploadUrlsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true

  AnalyticsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: analytics

  AnalyticsPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref AnalyticsResource
      HttpMethod: POST
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref StaffAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetAnalyticsArn}/invocations'

  GetStaffRolesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: get-staff-roles

  GetStaffRolesMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref GetStaffRolesResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetStaffRolesArn}/invocations'

  UsersTakeResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref UsersResource
      PathPart: take

  UsersTakePostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref UsersTakeResource
      HttpMethod: POST
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref StaffAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TakeUserArn}/invocations'

  MessagesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: messages

  MessagesGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref MessagesResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetMessagesArn}/invocations'

  MessagesPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref MessagesResource
      HttpMethod: POST
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref StaffAuthorizerOptional
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendMessageArn}/invocations'

  MessagesOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref MessagesResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true

  MessagesNotifyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref MessagesResource
      PathPart: notify

  MessagesNotifyPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref MessagesNotifyResource
      HttpMethod: POST
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref StaffAuthorizerOptional
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotifyArn}/invocations'

  MessagesNotifyOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref MessagesNotifyResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true

  LastMessagesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref MessagesResource
      PathPart: last

  LastMessagesGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref LastMessagesResource
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref StaffAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetLastMessagesArn}/invocations'

  PaymentsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: payments

  ConfirmCashPaymentResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref PaymentsResource
      PathPart: confirm

  ConfirmCashPaymentMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref ConfirmCashPaymentResource
      HttpMethod: POST
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref StaffAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConfirmCashPaymentArn}/invocations'

  StripeResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref PaymentsResource
      PathPart: stripe

  CreatePaymentIntentResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref StripeResource
      PathPart: intent

  CreatePaymentIntentMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref CreatePaymentIntentResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreatePaymentIntentArn}/invocations'
  
  CreatePaymentIntentOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref CreatePaymentIntentResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true

  ConfirmStripePaymentResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref StripeResource
      PathPart: confirm

  ConfirmStripePaymentMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref ConfirmStripePaymentResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConfirmStripePaymentArn}/invocations'

  ConfirmStripePaymentOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref ConfirmStripePaymentResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true

  StripePaymentWebhookResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref StripeResource
      PathPart: webhook

  StripePaymentWebhookMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref StripePaymentWebhookResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebhookStripePaymentArn}/invocations'
  
  StripePaymentWebhookOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref StripePaymentWebhookResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true

  # Invoice Generation
  InvoicesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref PaymentsResource
      PathPart: invoices

  InvoicesGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref InvoicesResource
      HttpMethod: GET
      AuthorizationType: NONE
      # AuthorizationType: CUSTOM
      # AuthorizerId: !Ref StaffAuthorizerOptional
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetInvoicesArn}/invocations'

  InvoicesGenerateMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref InvoicesResource
      HttpMethod: POST
      AuthorizationType: NONE
      # AuthorizationType: CUSTOM
      # AuthorizerId: !Ref StaffAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GenerateInvoiceArn}/invocations'

  InvoicesGenerateOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref InvoicesResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true

  # Lambda Permissions
  GetPricesPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetPricesArn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*'

  GetUsersPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetUsersArn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*'

  GetAppointmentsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetAppointmentsArn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*'

  CreateAppointmentPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CreateAppointmentArn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*'

  UpdateAppointmentPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref UpdateAppointmentArn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*'

  GetUnavailableSlotsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetUnavailableSlotsArn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*'

  UpdateUnavailableSlotsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref UpdateUnavailableSlotsArn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*'

  GetOrdersPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetOrdersArn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*'

  CreateOrderPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CreateOrderArn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*'

  UpdateOrderPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref UpdateOrderArn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*'

  ConfirmCashPaymentPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ConfirmCashPaymentArn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*'
  
  CreatePaymentIntentPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CreatePaymentIntentArn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*'

  ConfirmStripePaymentPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ConfirmStripePaymentArn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*'

  WebhookStripePaymentPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref WebhookStripePaymentArn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*'

  GenerateInvoicePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GenerateInvoiceArn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*'

  GetInquiriesPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetInquiriesArn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*'

  CreateInquiryPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CreateInquiryArn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*'

  GetReportUploadUrlPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetReportUploadUrlArn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*'

  GetAnalyticsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetAnalyticsArn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*'

  GetStaffRolesPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetStaffRolesArn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*'

  NotifyPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref NotifyArn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*'

  TakeUserPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref TakeUserArn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*'

  GetConnectionsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetConnectionsArn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*'

  GetMessagesPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetMessagesArn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*'

  GetLastMessagesPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetLastMessagesArn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*'

  SendMessagePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SendMessageArn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*'

  StaffAuthorizerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref StaffAuthorizerArn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/authorizers/${StaffAuthorizer}'

  StaffAuthorizerOptionalPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref StaffAuthorizerOptionalArn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/authorizers/${StaffAuthorizerOptional}'

  # API Gateway Stage
  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref RestApi
      DeploymentId: !Ref ApiDeploymentV2
      StageName: !Ref Environment
      Description: !Sub 'API Gateway stage for ${Environment}'
      Variables:
        environment: !Ref Environment

  # Deployment
  ApiDeploymentV2:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - PricesMethod
      - UsersMethod
      - AppointmentsGetMethod
      - AppointmentsPostMethod
      - AppointmentsIdPatchMethod
      - UnavailableSlotsGetMethod
      - UnavailableSlotsPostMethod
      - OrdersGetMethod
      - OrdersPostMethod
      - OrdersIdPatchMethod
      - InquiriesGetMethod
      - InquiriesPostMethod
      - ReportUploadUrlsPostMethod
      - GetStaffRolesMethod
      - MessagesNotifyPostMethod
      - UsersTakePostMethod
      - MessagesGetMethod
      - MessagesPostMethod
      - MessagesOptionsMethod
      - LastMessagesGetMethod
      - ConfirmCashPaymentMethod
      - CreatePaymentIntentMethod
      - CreatePaymentIntentOptionsMethod
      - ConfirmStripePaymentMethod
      - ConfirmStripePaymentOptionsMethod
      - StripePaymentWebhookMethod
      - StripePaymentWebhookOptionsMethod
      - InvoicesGetMethod
      - InvoicesGenerateMethod
      - InvoicesGenerateOptionsMethod
      - OrdersIdGetMethod
      - OrdersIdOptionsMethod
      - AppointmentsIdGetMethod
      - AppointmentsIdOptionsMethod
      - UsersOnlineGetMethod
      - MessagesNotifyOptionsMethod
      - ReportUploadUrlsOptionsMethod
      - AnalyticsPostMethod
      - InquiriesOptionsMethod
      - AppointmentsOptionsMethod
      - OrdersOptionsMethod
    Properties:
      RestApiId: !Ref RestApi
      Description: !Sub 'API Deployment for ${Environment} - Updated for Stage Separation'

Outputs:
  RestApiId:
    Description: REST API ID
    Value: !Ref RestApi
    Export:
      Name: !Sub '${AWS::StackName}-RestApiId'

  RestApiEndpoint:
    Description: REST API Endpoint
    Value: !Sub 'https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-RestApiEndpoint'

  ApiStageArn:
    Description: API Gateway Stage ARN
    Value: !Sub 'arn:aws:apigateway:${AWS::Region}::/restapis/${RestApi}/stages/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-ApiStageArn'
