AWSTemplateFormatVersion: '2010-09-09'
Description: 'Auto Lab Solutions - SES Identity Notification Configuration'

Parameters:
  EnvironmentName:
    Type: String
    Description: Environment name (development, production)
    Default: production
    AllowedValues:
      - development
      - production

  SesRegion:
    Type: String
    Description: AWS SES region
    Default: "ap-southeast-2"

  SESDomainName:
    Type: String
    Description: The SES domain name
    Default: "autolabsolutions.com"

  SESBounceTopicArn:
    Type: String
    Description: SNS Topic ARN for bounce notifications

  SESComplaintTopicArn:
    Type: String
    Description: SNS Topic ARN for complaint notifications

  SESDeliveryTopicArn:
    Type: String
    Description: SNS Topic ARN for delivery notifications
    Default: ""

Resources:
  # Simple Lambda function to configure SES notifications - WORKING VERSION
  SESNotificationConfiguratorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'ses-notification-configurator-${EnvironmentName}'
      Runtime: python3.13
      Handler: index.lambda_handler
      Timeout: 60
      Role: !GetAtt SESNotificationConfiguratorRole.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import json
          import time
          
          def lambda_handler(event, context):
              try:
                  print(f'Event: {json.dumps(event, default=str)}')
                  
                  domain = event['ResourceProperties']['Domain']
                  bounce_topic = event['ResourceProperties']['BounceTopicArn']
                  complaint_topic = event['ResourceProperties']['ComplaintTopicArn']
                  delivery_topic = event['ResourceProperties'].get('DeliveryTopicArn', '')
                  region = event['ResourceProperties']['Region']
                  
                  print(f'Domain: {domain}, Region: {region}')
                  
                  if event['RequestType'] == 'Delete':
                      print('Delete request - returning success')
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {'Message': 'Delete completed'})
                      return
                  
                  ses_client = boto3.client('ses', region_name=region)
                  
                  # Wait for domain to be verified (up to 5 minutes)
                  max_attempts = 30
                  attempt = 0
                  domain_verified = False
                  
                  while attempt < max_attempts and not domain_verified:
                      try:
                          response = ses_client.get_identity_verification_attributes(Identities=[domain])
                          attrs = response.get('VerificationAttributes', {}).get(domain, {})
                          status = attrs.get('VerificationStatus', 'Pending')
                          
                          print(f'Attempt {attempt + 1}: Domain verification status: {status}')
                          
                          if status == 'Success':
                              domain_verified = True
                              break
                          elif status == 'Failed':
                              raise Exception(f'Domain verification failed for {domain}')
                          
                          # Wait 10 seconds before next check
                          time.sleep(10)
                          attempt += 1
                          
                      except Exception as e:
                          print(f'Error checking domain: {str(e)}')
                          if 'not verified' in str(e).lower():
                              time.sleep(10)
                              attempt += 1
                              continue
                          raise e
                  
                  if not domain_verified:
                      # Instead of failing, just log and return success
                      # This allows the stack to deploy while SES verification completes
                      print(f'WARNING: Domain {domain} not yet verified. Notifications will be configured when verification completes.')
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {
                          'Message': f'Waiting for domain verification: {domain}',
                          'Status': 'Pending'
                      })
                      return
                  
                  # Configure notifications
                  print('Configuring bounce notifications...')
                  ses_client.put_identity_notification_attributes(
                      Identity=domain,
                      NotificationType='Bounce',
                      SnsTopic=bounce_topic,
                      Enabled=True
                  )
                  
                  print('Configuring complaint notifications...')
                  ses_client.put_identity_notification_attributes(
                      Identity=domain,
                      NotificationType='Complaint',
                      SnsTopic=complaint_topic,
                      Enabled=True
                  )
                  
                  if delivery_topic:
                      print('Configuring delivery notifications...')
                      ses_client.put_identity_notification_attributes(
                          Identity=domain,
                          NotificationType='Delivery',
                          SnsTopic=delivery_topic,
                          Enabled=True
                      )
                  
                  print('SES notifications configured successfully')
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {
                      'Message': f'Notifications configured for {domain}',
                      'Status': 'Configured'
                  })
                  
              except Exception as e:
                  error_msg = str(e)
                  print(f'Error: {error_msg}')
                  
                  # Don't fail the stack - just log the error
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {
                      'Message': f'Configuration skipped due to: {error_msg}',
                      'Status': 'Skipped'
                  })
  # IAM Role for the SES notification configurator function
  SESNotificationConfiguratorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SESNotificationAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ses:PutIdentityNotificationAttributes
                  - ses:GetIdentityNotificationAttributes
                  - ses:GetIdentityVerificationAttributes
                  - ses:ListIdentities
                Resource: '*'

  # Custom resource to configure SES identity notifications
  SESIdentityNotificationConfiguration:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt SESNotificationConfiguratorFunction.Arn
      Domain: !Ref SESDomainName
      BounceTopicArn: !Ref SESBounceTopicArn
      ComplaintTopicArn: !Ref SESComplaintTopicArn
      DeliveryTopicArn: !Ref SESDeliveryTopicArn
      Region: !Ref SesRegion
      Version: "2025-08-19-working"

Outputs:
  SESNotificationConfigured:
    Description: Indicates SES identity notifications are configured
    Value: !Ref SESIdentityNotificationConfiguration
    Export:
      Name: !Sub '${AWS::StackName}-SESNotificationConfigured'
