AWSTemplateFormatVersion: '2010-09-09'
Description: 'Auto Lab Solutions - SES Identity Notification Configuration'

Parameters:
  EnvironmentName:
    Type: String
    Description: Environment name (development, production)
    Default: production
    AllowedValues:
      - development
      - production

  SesRegion:
    Type: String
    Description: AWS SES region
    Default: "ap-southeast-2"

  SESDomainName:
    Type: String
    Description: The SES domain name
    Default: "autolabsolutions.com"

  SESBounceTopicArn:
    Type: String
    Description: SNS Topic ARN for bounce notifications

  SESComplaintTopicArn:
    Type: String
    Description: SNS Topic ARN for complaint notifications

  SESDeliveryTopicArn:
    Type: String
    Description: SNS Topic ARN for delivery notifications
    Default: ""

Resources:
  # Enhanced Lambda function to configure SES notifications with better error handling
  SESNotificationConfiguratorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'ses-notification-configurator-${EnvironmentName}'
      Runtime: python3.9
      Handler: index.lambda_handler
      Timeout: 120
      Role: !GetAtt SESNotificationConfiguratorRole.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import json
          import time
          
          def lambda_handler(event, context):
              try:
                  print(f'Received event: {json.dumps(event, default=str)}')
                  
                  domain = event['ResourceProperties']['Domain']
                  bounce_topic = event['ResourceProperties']['BounceTopicArn']
                  complaint_topic = event['ResourceProperties']['ComplaintTopicArn']
                  delivery_topic = event['ResourceProperties'].get('DeliveryTopicArn', '')
                  region = event['ResourceProperties']['Region']
                  
                  print(f'Configuring notifications for domain: {domain}')
                  print(f'Region: {region}')
                  print(f'Bounce Topic: {bounce_topic}')
                  print(f'Complaint Topic: {complaint_topic}')
                  print(f'Delivery Topic: {delivery_topic}')
                  
                  ses_client = boto3.client('ses', region_name=region)
                  sns_client = boto3.client('sns', region_name=region)
                  
                  if event['RequestType'] in ['Create', 'Update']:
                      
                      # Step 1: Validate SES domain exists and is verified
                      print('Step 1: Validating SES domain...')
                      try:
                          verification_response = ses_client.get_identity_verification_attributes(
                              Identities=[domain]
                          )
                          
                          verification_attrs = verification_response.get('VerificationAttributes', {})
                          domain_attrs = verification_attrs.get(domain, {})
                          verification_status = domain_attrs.get('VerificationStatus', 'NotStarted')
                          
                          print(f'Domain verification status: {verification_status}')
                          
                          if verification_status != 'Success':
                              # List all verified identities to help with debugging
                              identities_response = ses_client.list_identities()
                              verified_identities = identities_response.get('Identities', [])
                              print(f'Available verified identities: {verified_identities}')
                              
                              # Check if domain exists but not verified
                              if domain in verified_identities:
                                  error_msg = f'Domain {domain} exists but verification status is {verification_status}. Please verify the domain in SES first.'
                              else:
                                  error_msg = f'Domain {domain} not found in SES. Available identities: {verified_identities}. Please add and verify the domain first.'
                              
                              raise Exception(error_msg)
                              
                      except Exception as e:
                          print(f'SES domain validation failed: {str(e)}')
                          raise e
                      
                      # Step 2: Validate SNS topics exist and are accessible
                      print('Step 2: Validating SNS topics...')
                      
                      def validate_sns_topic(topic_arn, topic_name):
                          if not topic_arn or topic_arn == 'None':
                              raise Exception(f'{topic_name} topic ARN is empty or None')
                          
                          try:
                              sns_client.get_topic_attributes(TopicArn=topic_arn)
                              print(f'{topic_name} topic validated: {topic_arn}')
                          except Exception as e:
                              print(f'{topic_name} topic validation failed: {str(e)}')
                              raise Exception(f'{topic_name} topic {topic_arn} is not accessible: {str(e)}')
                      
                      validate_sns_topic(bounce_topic, 'Bounce')
                      validate_sns_topic(complaint_topic, 'Complaint')
                      
                      if delivery_topic:
                          validate_sns_topic(delivery_topic, 'Delivery')
                      
                      # Step 3: Configure SES notifications
                      print('Step 3: Configuring SES notifications...')
                      
                      # Configure bounce notifications
                      try:
                          ses_client.put_identity_notification_attributes(
                              Identity=domain,
                              NotificationType='Bounce',
                              SnsTopic=bounce_topic,
                              Enabled=True
                          )
                          print('Bounce notifications configured successfully')
                      except Exception as e:
                          print(f'Failed to configure bounce notifications: {str(e)}')
                          raise e
                      
                      # Configure complaint notifications
                      try:
                          ses_client.put_identity_notification_attributes(
                              Identity=domain,
                              NotificationType='Complaint',
                              SnsTopic=complaint_topic,
                              Enabled=True
                          )
                          print('Complaint notifications configured successfully')
                      except Exception as e:
                          print(f'Failed to configure complaint notifications: {str(e)}')
                          raise e
                      
                      # Configure delivery notifications (if provided)
                      if delivery_topic:
                          try:
                              ses_client.put_identity_notification_attributes(
                                  Identity=domain,
                                  NotificationType='Delivery',
                                  SnsTopic=delivery_topic,
                                  Enabled=True
                              )
                              print('Delivery notifications configured successfully')
                          except Exception as e:
                              print(f'Failed to configure delivery notifications: {str(e)}')
                              raise e
                      
                      # Step 4: Verify configuration
                      print('Step 4: Verifying configuration...')
                      time.sleep(2)  # Allow time for configuration to propagate
                      
                      try:
                          notification_attrs = ses_client.get_identity_notification_attributes(
                              Identities=[domain]
                          )
                          
                          domain_notifications = notification_attrs.get('NotificationAttributes', {}).get(domain, {})
                          print(f'Final notification configuration: {json.dumps(domain_notifications, default=str)}')
                          
                      except Exception as e:
                          print(f'Warning: Could not verify configuration: {str(e)}')
                          # Don't fail for verification issues
                      
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {
                          'Message': f'Successfully configured notifications for domain: {domain}',
                          'Domain': domain,
                          'BounceTopicArn': bounce_topic,
                          'ComplaintTopicArn': complaint_topic,
                          'DeliveryTopicArn': delivery_topic or 'Not configured'
                      })
                  
                  elif event['RequestType'] == 'Delete':
                      # Leave notifications configured on delete
                      print('Delete request - preserving notification configuration')
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {
                          'Message': 'Notification configuration preserved'
                      })
                  
              except Exception as e:
                  error_message = str(e)
                  print(f'ERROR: {error_message}')
                  print(f'Event details: {json.dumps(event, default=str)}')
                  
                  # Provide helpful error context
                  context_info = {
                      'Domain': event.get('ResourceProperties', {}).get('Domain', 'Unknown'),
                      'Region': event.get('ResourceProperties', {}).get('Region', 'Unknown'),
                      'RequestType': event.get('RequestType', 'Unknown'),
                      'LogGroup': context.log_group_name if hasattr(context, 'log_group_name') else 'Unknown',
                      'LogStream': context.log_stream_name if hasattr(context, 'log_stream_name') else 'Unknown'
                  }
                  
                  print(f'Context: {json.dumps(context_info)}')
                  
                  cfnresponse.send(event, context, cfnresponse.FAILED, {
                      'Message': f'Failed to configure SES notifications: {error_message}',
                      'Error': error_message,
                      'Context': context_info
                  })

  # Enhanced IAM Role for the SES notification configurator function
  SESNotificationConfiguratorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SESNotificationAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ses:PutIdentityNotificationAttributes
                  - ses:GetIdentityNotificationAttributes
                  - ses:GetIdentityVerificationAttributes
                  - ses:ListIdentities
                Resource: '*'
              - Effect: Allow
                Action:
                  - sns:GetTopicAttributes
                Resource: '*'

  # Custom resource to configure SES identity notifications
  SESIdentityNotificationConfiguration:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt SESNotificationConfiguratorFunction.Arn
      Domain: !Ref SESDomainName
      BounceTopicArn: !Ref SESBounceTopicArn
      ComplaintTopicArn: !Ref SESComplaintTopicArn
      DeliveryTopicArn: !Ref SESDeliveryTopicArn
      Region: !Ref SesRegion
      Version: "2025-08-19-v4-enhanced"

Outputs:
  SESNotificationConfigured:
    Description: Indicates SES identity notifications are configured
    Value: !Ref SESIdentityNotificationConfiguration
    Export:
      Name: !Sub '${AWS::StackName}-SESNotificationConfigured'
