AWSTemplateFormatVersion: '2010-09-09'
Description: 'Auto Lab Solutions - SES Identity Notification Configuration'

Parameters:
  EnvironmentName:
    Type: String
    Description: Environment name (development, production)
    Default: production
    AllowedValues:
      - development
      - production

  SesRegion:
    Type: String
    Description: AWS SES region
    Default: "ap-southeast-2"

  SESDomainName:
    Type: String
    Description: The SES domain name
    Default: "autolabsolutions.com"

  SESBounceTopicArn:
    Type: String
    Description: SNS Topic ARN for bounce notifications

  SESComplaintTopicArn:
    Type: String
    Description: SNS Topic ARN for complaint notifications

  SESDeliveryTopicArn:
    Type: String
    Description: SNS Topic ARN for delivery notifications
    Default: ""

Resources:
  # Simple Lambda function to configure SES notifications
  SESNotificationConfiguratorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'ses-notification-configurator-${EnvironmentName}'
      Runtime: python3.9
      Handler: index.lambda_handler
      Timeout: 60
      Role: !GetAtt SESNotificationConfiguratorRole.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import json
          
          def lambda_handler(event, context):
              try:
                  print(f'Received event: {json.dumps(event, default=str)}')
                  
                  domain = event['ResourceProperties']['Domain']
                  bounce_topic = event['ResourceProperties']['BounceTopicArn']
                  complaint_topic = event['ResourceProperties']['ComplaintTopicArn']
                  delivery_topic = event['ResourceProperties'].get('DeliveryTopicArn', '')
                  region = event['ResourceProperties']['Region']
                  
                  print(f'Configuring notifications for domain: {domain}')
                  
                  ses_client = boto3.client('ses', region_name=region)
                  
                  if event['RequestType'] in ['Create', 'Update']:
                      # Configure bounce notifications
                      ses_client.put_identity_notification_attributes(
                          Identity=domain,
                          NotificationType='Bounce',
                          SnsTopic=bounce_topic,
                          Enabled=True
                      )
                      print('Bounce notifications configured')
                      
                      # Configure complaint notifications
                      ses_client.put_identity_notification_attributes(
                          Identity=domain,
                          NotificationType='Complaint',
                          SnsTopic=complaint_topic,
                          Enabled=True
                      )
                      print('Complaint notifications configured')
                      
                      # Configure delivery notifications (if provided)
                      if delivery_topic:
                          ses_client.put_identity_notification_attributes(
                              Identity=domain,
                              NotificationType='Delivery',
                              SnsTopic=delivery_topic,
                              Enabled=True
                          )
                          print('Delivery notifications configured')
                      
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {
                          'Message': f'Successfully configured notifications for domain: {domain}'
                      })
                  
                  elif event['RequestType'] == 'Delete':
                      # Leave notifications configured on delete
                      print('Delete request - preserving notification configuration')
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {
                          'Message': 'Notification configuration preserved'
                      })
                  
              except Exception as e:
                  error_message = str(e)
                  print(f'Error: {error_message}')
                  cfnresponse.send(event, context, cfnresponse.FAILED, {
                      'Message': f'Failed to configure SES notifications: {error_message}'
                  })

  # IAM Role for the SES notification configurator function
  SESNotificationConfiguratorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SESNotificationAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ses:PutIdentityNotificationAttributes
                  - ses:GetIdentityNotificationAttributes
                Resource: '*'

  # Custom resource to configure SES identity notifications
  SESIdentityNotificationConfiguration:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt SESNotificationConfiguratorFunction.Arn
      Domain: !Ref SESDomainName
      BounceTopicArn: !Ref SESBounceTopicArn
      ComplaintTopicArn: !Ref SESComplaintTopicArn
      DeliveryTopicArn: !Ref SESDeliveryTopicArn
      Region: !Ref SesRegion
      Version: "2025-08-19-v3"

Outputs:
  SESNotificationConfigured:
    Description: Indicates SES identity notifications are configured
    Value: !Ref SESIdentityNotificationConfiguration
    Export:
      Name: !Sub '${AWS::StackName}-SESNotificationConfigured'
