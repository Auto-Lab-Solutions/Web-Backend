name: Deploy to Development

on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]
    types: [closed]

env:
  AWS_REGION: ap-southeast-2
  ENVIRONMENT: development
  AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
  STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
  STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
  SHARED_API_KEY: ${{ secrets.SHARED_API_KEY }}

jobs:
  validate:
    name: Validate Code
    runs-on: ubuntu-latest
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        # Install common dependencies for validation
        if [ -f lambda/common_lib/requirements.txt ]; then
          pip install -r lambda/common_lib/requirements.txt
        fi

    - name: Validate Python syntax
      run: |
        # Check Python syntax in all Lambda functions
        find lambda -name "*.py" -exec python -m py_compile {} \;

    - name: Check AWS credentials
      run: |
        if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ] || [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
          echo "Error: AWS credentials are not configured in repository secrets"
          echo "Please add AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY to your repository secrets"
          exit 1
        fi
        echo "AWS credentials are configured"

    - name: Configure AWS credentials for validation
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Validate CloudFormation templates
      run: |
        # Install AWS CLI
        pip install awscli
        
        # Validate templates that can be validated individually (no cross-references)
        echo "Validating standalone templates..."
        aws cloudformation validate-template --template-body file://infrastructure/dynamodb-tables.yaml --region $AWS_REGION
        aws cloudformation validate-template --template-body file://infrastructure/s3-cloudfront.yaml --region $AWS_REGION
        aws cloudformation validate-template --template-body file://infrastructure/websocket-api.yaml --region $AWS_REGION
        
        # Check existence of cross-reference templates (skip validation due to dependencies)
        echo "Checking cross-reference templates exist..."
        if [[ ! -f "infrastructure/main-stack.yaml" ]]; then
          echo "Error: main-stack.yaml not found"
          exit 1
        fi
        if [[ ! -f "infrastructure/lambda-functions.yaml" ]]; then
          echo "Error: lambda-functions.yaml not found"
          exit 1
        fi
        if [[ ! -f "infrastructure/api-gateway.yaml" ]]; then
          echo "Error: api-gateway.yaml not found"
          exit 1
        fi
        echo "All templates exist and cross-reference validation skipped"

  deploy:
    name: Deploy to Development
    runs-on: ubuntu-latest
    environment: development
    needs: validate
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install awscli

    - name: Make scripts executable
      run: |
        chmod +x *.sh
        chmod +x config/environments.sh

    - name: Set environment configuration
      run: |
        echo "Setting up development environment configuration"
        export AUTO_LAB_ENV=development

    - name: Deploy infrastructure
      run: |
        echo "Deploying to development environment"
        ./deploy.sh development
      env:
        AUTO_LAB_ENV: development

    - name: Validate deployment
      run: |
        echo "Validating development deployment"
        ./validate-deployment.sh --env development
      env:
        AUTO_LAB_ENV: development

    - name: Get deployment info
      run: |
        echo "Getting deployment endpoints and status"
        ./dev-tools.sh --env development endpoints
        ./dev-tools.sh --env development status
      env:
        AUTO_LAB_ENV: development

  test:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    environment: development
    needs: deploy
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install awscli boto3 requests

    - name: Make scripts executable
      run: |
        chmod +x *.sh
        chmod +x config/environments.sh

    - name: Run basic API tests
      run: |
        echo "Running basic integration tests"
        # Test Lambda functions individually
        ./dev-tools.sh --env development test api-get-staff-roles
        ./dev-tools.sh --env development test api-get-prices
      env:
        AUTO_LAB_ENV: development
      continue-on-error: true

    - name: Check logs for errors
      run: |
        echo "Checking recent logs for any errors"
        ./dev-tools.sh --env development logs api-get-staff-roles
      env:
        AUTO_LAB_ENV: development
      continue-on-error: true
