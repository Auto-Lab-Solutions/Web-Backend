name: Deploy SES Email Receiving Infrastructure

on:
  push:
    branches:
      - ses-fix
    paths:
      - 'email-receiving-infrastructure/**'
  pull_request:
    branches:
      - ses-fix
    paths:
      - 'email-receiving-infrastructure/**'
  workflow_dispatch:

env:
  AWS_REGION: us-east-1  # SES email receiving must be in us-east-1

jobs:
  validate:
    name: Validate CloudFormation Template
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.changes.outputs.should_deploy }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check for changes in email infrastructure
        id: changes
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "Manual workflow dispatch - will proceed with deployment"
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            echo "Pull request - validation only"
          else
            # Check if email-receiving-infrastructure files changed
            if git diff --name-only HEAD^ HEAD | grep -q "^email-receiving-infrastructure/"; then
              echo "should_deploy=true" >> $GITHUB_OUTPUT
              echo "Email infrastructure files changed - will proceed with deployment"
            else
              echo "should_deploy=false" >> $GITHUB_OUTPUT
              echo "No email infrastructure changes detected"
            fi
          fi

      - name: Validate CloudFormation template
        working-directory: email-receiving-infrastructure
        run: |
          echo "Validating CloudFormation template..."
          aws cloudformation validate-template \
            --template-body file://ses-email-receiving.yaml \
            --region ${{ env.AWS_REGION }}
          echo "✅ Template validation passed"

      - name: Check template syntax with cfn-lint (if available)
        working-directory: email-receiving-infrastructure
        run: |
          if command -v cfn-lint &> /dev/null; then
            echo "Running cfn-lint..."
            cfn-lint ses-email-receiving.yaml
            echo "✅ cfn-lint validation passed"
          else
            echo "cfn-lint not available, skipping..."
          fi
        continue-on-error: true

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: validate
    if: |
      needs.validate.outputs.should_deploy == 'true' && 
      (github.ref == 'refs/heads/ses-fix' || github.event_name == 'workflow_dispatch')
    environment: 
      name: development
      url: https://console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials for Development
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_DEPLOYMENT_ROLE_DEV }}
          role-duration-seconds: 3600

      - name: Deploy SES Email Receiving Infrastructure to Development
        working-directory: email-receiving-infrastructure
        run: |
          echo "Deploying to development environment"
          ./deploy-ses-email-receiving.sh -e dev

      - name: Upload deployment logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deployment-logs-dev
          path: |
            email-receiving-infrastructure/*.log
          retention-days: 30

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [validate, deploy-dev]
    if: |
      needs.validate.outputs.should_deploy == 'true' && 
      github.event_name == 'workflow_dispatch' &&
      success()
    environment: 
      name: staging
      url: https://console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials for Staging
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_DEPLOYMENT_ROLE_STAGING }}
          role-duration-seconds: 3600

      - name: Deploy SES Email Receiving Infrastructure to Staging
        working-directory: email-receiving-infrastructure
        run: |
          echo "Deploying to staging environment"
          ./deploy-ses-email-receiving.sh -e staging

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate, deploy-staging]
    if: |
      needs.validate.outputs.should_deploy == 'true' && 
      github.event_name == 'workflow_dispatch' &&
      success()
    environment: 
      name: production
      url: https://console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials for Production
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_DEPLOYMENT_ROLE_PROD }}
          role-duration-seconds: 3600

      - name: Deploy SES Email Receiving Infrastructure to Production
        working-directory: email-receiving-infrastructure
        run: |
          echo "Deploying to production environment"
          ./deploy-ses-email-receiving.sh -e prod

      - name: Upload deployment logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deployment-logs-prod
          path: |
            email-receiving-infrastructure/*.log
          retention-days: 90

  notification:
    name: Send Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-staging, deploy-production]
    if: always() && (needs.deploy-dev.result != 'skipped' || needs.deploy-staging.result != 'skipped' || needs.deploy-production.result != 'skipped')
    
    steps:
      - name: Determine deployment status
        id: status
        run: |
          if [ "${{ needs.deploy-dev.result }}" = "success" ] || [ "${{ needs.deploy-staging.result }}" = "success" ] || [ "${{ needs.deploy-production.result }}" = "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=SES Email Receiving Infrastructure deployed successfully" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=SES Email Receiving Infrastructure deployment failed" >> $GITHUB_OUTPUT
          fi

      - name: Send Slack notification (if configured)
        if: vars.SLACK_WEBHOOK_URL
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"${{ steps.status.outputs.message }} - Workflow: ${{ github.workflow }}, Branch: ${{ github.ref_name }}, Commit: ${{ github.sha }}"}' \
            ${{ vars.SLACK_WEBHOOK_URL }}
        continue-on-error: true
